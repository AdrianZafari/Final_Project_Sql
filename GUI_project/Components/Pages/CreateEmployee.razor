@page "/create-employee"
@using Business.Interfaces
@using Business.DTOs
@using Microsoft.AspNetCore.Components.Forms
@inject IEmployeeServices EmployeeServices
@inject IEmployeeServices EmployeeServices
@inject NavigationManager NavigationManager

<h1 class="fw-bold mb-4">Register New Employee</h1>
<p>Fill in the details below and press "Register Employee".</p>
<hr class="mb-4"/>

<EditForm Model="@employeeForm" OnValidSubmit="HandleSubmit" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group pb-2">
        <label for="firstName"><span class="text-muted">*</span> First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="employeeForm.FirstName" />
    </div>

    <div class="form-group pb-2">
        <label for="lastName"><span class="text-muted">*</span> Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="employeeForm.LastName" />
    </div>

    <div class="form-group pb-2">
        <label for="email"><span class="text-muted">*</span> Email</label>
        <InputText id="email" class="form-control" @bind-Value="employeeForm.Employee_Email" />
    </div>

    <div class="form-group pb-2">
        <label for="phoneNumber">Phone Number</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="employeeForm.PhoneNumber" />
    </div>

    <div class="form-group pb-2">
        <label for="role"><span class="text-muted">*</span> Employee Role</label>
        <InputText id="role" class="form-control" @bind-Value="employeeForm.Employee_Role_Name" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Register Employee</button>
</EditForm>

<p class="@messageClass">@message</p>

@code {
    private EmployeeRegistrationForm employeeForm = new();
    private string message = "";
    private string messageClass = "";

    private async Task HandleSubmit() 
    {
        // Trim whitespace from input fields
        foreach (var property in employeeForm.GetType().GetProperties())
        {
            if (property.PropertyType == typeof(string))
            {
                var currentValue = (string?)property.GetValue(employeeForm);
                if (!string.IsNullOrEmpty(currentValue))
                {
                    property.SetValue(employeeForm, currentValue.Trim());
                }
            }
        }

        try
        {
            var newEmployee = await EmployeeServices.CreateEmployeeAsync(employeeForm);

            if (newEmployee != null)
            {
                message = "Employee registered successfully!";
                messageClass = "text-success fw-bold";
                employeeForm = new EmployeeRegistrationForm();

                await Task.Delay(1500);
                NavigationManager.NavigateTo("/employees"); // Redirect to employees list
            }
            else
            {
                message = "Error registering employee. Please try again.";
                messageClass = "text-danger fw-bold";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "text-danger fw-bold";
        }
    }
}

