@page "/edit-employee/{id:int}"
@using Business.Interfaces
@using Business.DTOs
@using Business.Models
@inject IEmployeeServices EmployeeService
@inject NavigationManager NavigationManager

<h1 class="fw-bold mb-4">Edit Employee</h1>
<hr class="mb-5" />

<EditForm Model="@updatedEmployeeForm" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group pb-2">
        <label for="firstName" class="pb-1"><span class="text-muted">*</span>First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="updatedEmployeeForm.FirstName" />
    </div>

    <div class="form-group pb-2">
        <label for="lastName" class="pb-1"><span class="text-muted">*</span>Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="updatedEmployeeForm.LastName" />
    </div>

    <div class="form-group pb-2">
        <label for="email" class="pb-1"><span class="text-muted">*</span>Email</label>
        <InputText id="email" class="form-control" @bind-Value="updatedEmployeeForm.Employee_Email" />
    </div>

    <div class="form-group pb-2">
        <label for="phoneNumber" class="pb-1">Phone Number</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="updatedEmployeeForm.PhoneNumber" />
    </div>

    <div class="form-group pb-2">
        <label for="roleName" class="pb-1"><span class="text-muted">*</span>Employee Role</label>
        <InputText id="roleName" class="form-control" @bind-Value="updatedEmployeeForm.Employee_Role_Name" />
    </div>

    <button type="submit" class="btn btn-primary mt-3 float-md-end">Update Employee</button>
</EditForm>

<p class="@messageClass">@message</p>

@code {
    [Parameter] public int id { get; set; }
    private EmployeeRegistrationForm updatedEmployeeForm = new();
    private string message = "";
    private string messageClass = "";

    protected override async Task OnInitializedAsync()
    {
        var employee = await EmployeeService.GetEmployeeByIdAsync(id);

        if (employee != null)
        {
            updatedEmployeeForm = new EmployeeRegistrationForm
                {
                    FirstName = employee.FirstName,
                    LastName = employee.LastName,
                    Employee_Email = employee.Employee_Email,
                    PhoneNumber = employee.PhoneNumber,
                    Employee_Role_Name = employee.Employee_Role_Name
                };
        }
        else
        {
            message = "Employee not found!";
            messageClass = "text-danger";
        }
    }

    private async Task HandleSubmit()
    {
        // Trim all input values
        foreach (var property in updatedEmployeeForm.GetType().GetProperties())
        {
            if (property.PropertyType == typeof(string))
            {
                var currentValue = (string?)property.GetValue(updatedEmployeeForm);
                if (currentValue != null)
                {
                    property.SetValue(updatedEmployeeForm, currentValue.Trim());
                }
            }
        }

        var updatedEmployee = await EmployeeService.UpdateEmployeeAsync(id, updatedEmployeeForm);

        if (updatedEmployee != null)
        {
            message = "Employee updated successfully! Redirecting...";
            messageClass = "text-success fw-bold";


            NavigationManager.NavigateTo("/employees");
        }
        else
        {
            message = "Error updating employee. Please try again.";
            messageClass = "text-danger fw-bold";
        }
    }
}
