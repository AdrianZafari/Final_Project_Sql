@page "/employees"
@using Business.Interfaces
@using Business.DTOs
@using Business.Models
@inject IEmployeeServices EmployeeService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="fw-bold">Employees</h1>
    <button class="btn btn-primary" style="width: 20%;" @onclick="NavigateToCreate">
        Register Employees
    </button>
</div>

<!-- Search Bar -->
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search employees..." @bind="searchQuery" @bind:event="oninput" @bind:after="FilterEmployees" />
</div>

@if (filteredEmployees?.Any() == true)
{
    <div class="accordion" id="employeeAccordion">
        @foreach (var employee in filteredEmployees.OrderBy(e => e.LastName))
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-@employee.Employee_Id">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@employee.Employee_Id">
                        <strong>@employee.FirstName @employee.LastName</strong>
                    </button>
                </h2>
                <div id="collapse-@employee.Employee_Id" class="accordion-collapse collapse" data-bs-parent="#employeeAccordion">
                    <div class="accordion-body">
                        <p><strong>Name:</strong> @employee.FirstName @employee.LastName</p>
                        <p><strong>Email:</strong> @employee.Employee_Email</p>
                        <p><strong>Phone:</strong> @(employee.PhoneNumber ?? "N/A")</p>
                        <p><strong>Role:</strong> @employee.Employee_Role_Name</p>

                        <div class="d-flex justify-content-end">
                            <button class="btn btn-warning btn-sm mx-2" @onclick="() => NavigateToEdit(employee.Employee_Id)">
                                <img src="Images/pencil-square.svg" style="width:20px;" />
                            </button>
                            <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal" @onclick="() => SetEmployeeForDelete(employee.Employee_Id)">
                                <img src="Images/trash.svg" style="width:20px;" />
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No employees found.</p>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this employee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteEmployee" data-bs-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private IEnumerable<Employee>? allEmployees;
    private IEnumerable<Employee>? filteredEmployees;
    private int? employeeIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        allEmployees = await EmployeeService.GetAllEmployees();
        filteredEmployees = allEmployees;
    }

    private void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredEmployees = allEmployees;
        }
        else
        {
            string trimmedQuery = searchQuery.Trim().ToLowerInvariant();
            filteredEmployees = allEmployees?.Where(e =>
                e.FirstName.ToLowerInvariant().Contains(trimmedQuery) ||
                e.LastName.ToLowerInvariant().Contains(trimmedQuery) ||
                e.Employee_Email.ToLowerInvariant().Contains(trimmedQuery) ||
                (e.PhoneNumber?.Contains(trimmedQuery) ?? false) ||
                e.Employee_Role_Name.ToLowerInvariant().Contains(trimmedQuery));
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo($"/create-employee");
    }

    private void NavigateToEdit(int employeeId)
    {
        NavigationManager.NavigateTo($"/edit-employee/{employeeId}");
    }

    private void SetEmployeeForDelete(int employeeId)
    {
        employeeIdToDelete = employeeId;
    }

    private async Task ConfirmDeleteEmployee()
    {
        if (employeeIdToDelete.HasValue)
        {
            bool isDeleted = await EmployeeService.DeleteEmployeeAsync(employeeIdToDelete.Value);
            if (isDeleted)
            {
                allEmployees = await EmployeeService.GetAllEmployees();
                FilterEmployees();
                StateHasChanged();
            }
        }
    }
}