@page "/"
@using Business.Interfaces
@using Business.Models
@inject IProjectServices ProjectService
@inject IServiceServices ServiceService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="fw-bold">Projects</h1>
    <button class="btn btn-primary" style="width: 20%;" @onclick="NavigateToCreate">
        Create Project
    </button>
</div>

<hr class="mb-2" />
<!-- Much of the code was refactored from my previous C# assignment, at least as far as frontend design is concerned -->


<!-- Status Filters with number of total projects of each type -->
<div class="mb-3">
    <button class="btn btn-secondary me-2" @onclick="() => FilterByStatus(ProjectStatus.Active)">
        Active Projects (@activeCount)
    </button>
    <button class="btn btn-secondary me-2" @onclick="() => FilterByStatus(ProjectStatus.Completed)">
        Completed Projects (@completedCount)
    </button>
    <button class="btn btn-secondary" @onclick="() => FilterByStatus(ProjectStatus.Inactive)">
        Inactive Projects (@inactiveCount)
    </button>
</div>

<!-- Search Bar -->
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search projects..." @bind="searchQuery" @bind:event="oninput" @bind:after="FilterProjects" />
</div>

@if (filteredProjects?.Any() == true)
{
    <div class="accordion" id="projectAccordion">
        @foreach (var project in filteredProjects.OrderBy(p => p.ProjectNumber))
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-@project.Project_Id">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapse-@project.Project_Id"
                            @onclick="() => LoadServices(project.Project_Id)"> <!-- Must load in services asynchronously from DB -->
                        <strong>@project.Customer_Name @project.ProjectNumber</strong>
                    </button>
                </h2>
                <div id="collapse-@project.Project_Id" class="accordion-collapse collapse" data-bs-parent="#projectAccordion">
                    <div class="accordion-body">
                        <div class="row">
                            <!-- Project Details Column -->
                            <div class="col-md-6">
                                <p><strong>Project Number:</strong> @project.ProjectNumber</p>
                                <p><strong>Start Date:</strong> @project.StartDate.ToShortDateString()</p>
                                <p><strong>End Date:</strong> @(project.EndDate?.ToShortDateString() ?? "N/A")</p>
                                <p><strong>Deadline:</strong> @(project.Deadline?.ToShortDateString() ?? "N/A")</p>
                                <p><strong>Project Leader:</strong> @project.Project_Leader_FirstName @project.Project_Leader_LastName</p>
                            </div>

                            <!-- Contact Person Details Column -->
                            <div class="col-md-6">
                                @if (project.ContactPerson_Email != null)
                                {
                                    <p><strong>Company:</strong> @project.Customer_Name</p>
                                    <p><strong>Contact Name:</strong> @project.ContactPerson_FirstName</p>
                                    <p><strong>Email:</strong> @project.ContactPerson_Email</p>
                                    <p><strong>Phone:</strong> @project.ContactPerson_Phone</p>  
                                }
                                else
                                {
                                    <p>No contact person assigned.</p>
                                }
                            </div>
                        </div>

                        <!-- Services Row -->
                        @if (projectServices.ContainsKey(project.Project_Id) && projectServices[project.Project_Id].Any())
                        {
                            <div class="mt-3">
                                <h5 class="fw-bold">Services</h5>
                                <ul class="list-group">
                                    @foreach (var service in projectServices[project.Project_Id])
                                    {
                                        <li class="list-group-item">
                                            <strong>@service.Service_Name</strong> <br />@service.Service_Description <br />$@service.Service_Price
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p>No services assigned.</p>
                        }


                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-end mt-3">
                            <button class="btn btn-warning btn-sm mx-2" @onclick="() => NavigateToEdit(project.Project_Id)">
                                <img src="Images/pencil-square.svg" style="width:20px;" />
                            </button>
                            <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal" @onclick="() => SetProjectForDelete(project.Project_Id)">
                                <img src="Images/trash.svg" style="width:20px;" />
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        }
    </div>
}
else
{
    <p>No projects found.</p>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this project?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteProject" data-bs-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private IEnumerable<Project>? allProjects;
    private IEnumerable<Project>? filteredProjects;
    private Dictionary<int, List<Service>> projectServices = new(); // needs to store the project ID and all relevant servicesss
    private int? projectIdToDelete;

    private int activeCount;
    private int completedCount;
    private int inactiveCount;

    protected override async Task OnInitializedAsync()
    {
        allProjects = await ProjectService.GetAllProjects();
        UpdateProjectCounts();
        filteredProjects = allProjects;

        // Load services for each project
        if (allProjects != null)
        {
            foreach (var project in allProjects)
            {
                var services = await ServiceService.GetAllServicesByProjectIdAsync(project.Project_Id);
                projectServices[project.Project_Id] = services?.ToList() ?? new List<Service>();
            }
        }
    }

    private async Task LoadServices(int projectId)
    {
        if (!projectServices.ContainsKey(projectId) || !projectServices[projectId].Any())
        {
            var services = await ServiceService.GetAllServicesByProjectIdAsync(projectId);
            projectServices[projectId] = services?.ToList() ?? new List<Service>();
            StateHasChanged(); // Refresh the UI
        }
    }


    private void UpdateProjectCounts()
    {
        activeCount = allProjects?.Count(p => p.ProjectStatus == ProjectStatus.Active) ?? 0;
        completedCount = allProjects?.Count(p => p.ProjectStatus == ProjectStatus.Completed) ?? 0;
        inactiveCount = allProjects?.Count(p => p.ProjectStatus == ProjectStatus.Inactive) ?? 0;
    }

    private void FilterProjects()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredProjects = allProjects;
        }
        else
        {
            string trimmedQuery = searchQuery.Trim().ToLowerInvariant();
            filteredProjects = allProjects?.Where(p =>
                p.ProjectNumber.ToLowerInvariant().Contains(trimmedQuery) ||
                p.ContactPerson_FirstName.ToLowerInvariant().Contains(trimmedQuery) ||
                p.ContactPerson_LastName.ToLowerInvariant().Contains(trimmedQuery) ||
                p.ProjectLeader_Id.ToString().Contains(trimmedQuery)||
                p.Project_Leader_FirstName.ToLowerInvariant().Contains(trimmedQuery)||
                p.Project_Leader_LastName.ToLowerInvariant().Contains(trimmedQuery) ||
                p.ProjectStatus.ToString().ToLowerInvariant().Contains(trimmedQuery));
        }
    }

    private void FilterByStatus(ProjectStatus status)
    {
        filteredProjects = allProjects?.Where(p => p.ProjectStatus == status);
        UpdateProjectCounts();
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/create-project");
    }

    private void NavigateToEdit(int projectId)
    {
        NavigationManager.NavigateTo($"/edit-project/{projectId}");
    }

    private void SetProjectForDelete(int projectId)
    {
        projectIdToDelete = projectId;
    }

    private async Task ConfirmDeleteProject()
    {
        if (projectIdToDelete.HasValue)
        {
            bool isDeleted = await ProjectService.DeleteProjectAsync(projectIdToDelete.Value);
            if (isDeleted)
            {
                allProjects = await ProjectService.GetAllProjects();
                UpdateProjectCounts();
                FilterProjects();
                StateHasChanged();
            }
        }
    }
}
